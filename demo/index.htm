<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>markdown-muncher demo</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!--
        Disclaimer: The author of this demo page declines and and all
        responsibility for damages to good taste and aesthetics.
    -->

    <style>
        body {
            box-sizing: border-box;
            padding: 0 10%;
        }

        body script[type="text/markdown"] {
            display: block;
            white-space: pre;
            font-family: monospace;

            padding: 0 1.5em;
            background-color: lightyellow;

            overflow-x: scroll;
        }

        body script[type="text/markdown"].rendered {
            background-color: lightgreen;
        }

        table {
            border-collapse: collapse;
            margin: 1em auto;
            border-bottom: 1.5px solid black;
        }

        table th,
        table td {
            padding: 0.3em 0.5em;
            border-bottom: 1px solid black;
        }
    </style>
    <script type="module" defer>
        import process from '../dist/markdown-muncher.min.mjs'

        document.querySelectorAll('script[type="text/markdown"').forEach((n) => {
            process(n.textContent).then((html) => {
                n.insertAdjacentHTML('beforebegin', html)
                n.classList.toggle('rendered', true)
            })
        })
    </script>


    <!-- Code blocks' syntax highlighting with Highlight.js -->

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.7.0/styles/stackoverflow-light.css">
    <style>
        /* Has lower specificity than Highligh.js', will style code blocks that
           have not been processed, e.g. if Highlight.js fails to load for some
           reason. The style just so happens (wink wink) to match the selected
           hljs stylesheed. */
        pre code {
            display: block;
            overflow-x: auto;
            padding: 1em;
            background: #f6f6f6;
            color: #2f3337;
        }

        pre:has(code[data-language]) {
            position: relative;
        }

        /* FF fix; doesn't support :has() yet =(
           https://bugzilla.mozilla.org/show_bug.cgi?id=418039 */
        pre {
            position: relative;
        }

        /* Adapted from CSS Paper-edge effect by Felix Schwarzer (slimsmearlapp)
           https://codepen.io/slimsmearlapp/pen/DqVqPy */

        pre:has(code[data-language])::before {
            content: "";
            display: block;
            position: absolute;
            border: 20px solid transparent;
            border-top: 20px solid white;
            top: -25px;
            right: -25px;
            box-shadow: 0px -7px 6px -10px black;
            transform: rotate(225deg);
        }

        pre:has(code[data-language])::after {
            content: "";
            display: block;
            position: absolute;
            border: 20px solid transparent;
            border-bottom: 20px solid white;
            bottom: -25px;
            left: -25px;
            box-shadow: 0px 7px 6px -11px black;
            transform: rotate(225deg);
        }

        pre code[data-language] {
            padding-bottom: calc(11px + 2em);
        }

        pre code[data-language]::after {
            content: attr(data-language);

            display: block;
            overflow-x: hidden;

            position: absolute;
            bottom: 5px;
            left: 5px;
            right: -1px;

            background: #fcfcfc;
            outline: 1px solid #f6f6f6;
            border-radius: 2px 0 0 2px;

            padding: 5px 0.5em 1px 1em;
            color: #284283;
            font-size: 0.8em;
            font-family: auto;
        }

        pre code[data-language][data-caption]::after {
            content: attr(data-language) '  —  ' attr(data-caption);
        }
    </style>
    <script type="module" defer>
        import hljs from 'https://cdn.jsdelivr.net/npm/highlight.js@11.7.0/+esm'

        hljs.configure({
            languages: [], // disables auto detection
        })

        hljs.addPlugin({
            'after:highlightElement': ({ el, result }) => {
                // Set 'language' data attribute to canonical language name
                if (result.language) {
                    el.dataset.language = hljs.getLanguage(result.language).name
                }
            }
        })

        document.addEventListener('DOMContentLoaded', (event) => {
            document.querySelectorAll('pre code').forEach((el) => {
                hljs.highlightElement(el)
            });
        });
    </script>
</head>
<body>
    <script type="text/markdown">
# markdown-muncher demo page

**markdown-muncher** is a bundled version of remark-parse[^1] and rehype for
modern browsers, ready to munch your pages' markdown.

A [rollup] pipeline is used to bundle, optimize and export everything as a
single-file ES6 module (*ESM*), converting the original sources that were
initially written in CommonJS (*CJS*) for Node.

To make this demo work, generate the bundle with:

    npm install
    npm run build

Then start a webserver at the project's root and open the `demo/` directory in
your browser.

The formatted content of this page has been generated from the highlighted
Markdown below.

<!--
If you see this comment you are already reading the source Markdown.
Look Up!

And if you only see the source Markdown highlighted in yellow instead of green,
something went wrong...
-->

The default muncher comes pre-configured with a few remark plugins to add
support for non-standard but very common and helpful elements, like footnotes,
tables, task list items and autolinks:

| Plugin              | Description                                        |
|---------------------|----------------------------------------------------|
| `remark-gfm`        | Adds tables, tasks, autolinks, footnotes and more… |
| `handler-code-meta` | Parses fenced code blocks' info string             |


This example page is further processed by [highlight.js] to enable syntax
highlighting of fenced code blocks, with some extra code to update the language
slug to the full language's name in the rendered blocks' footer.

Below are a few examples:

```js caption=Fibonacci
function fib(n) {
  return n < 2 ? n : fib(n - 1) + fib(n - 2)
}
```

```lua caption="bis repetita placent"
function fib(n)
  return n < 2 and n or fib(n - 1) + fib(n - 2)
end
```

```yml
%YAML 1.2
---
YAML: YAML Ain't Markup Language™

What It Is:
  YAML is a human-friendly data serialization
  language for all programming languages.
```


[^1]: A markdown parser 100% compliant with CommonMark and still extensible;
      part of the [remark] project, itself part of the [unified] ecosystem.

[remark]: https://github.com/remarkjs/remark
[rollup]: https://rollupjs.org
[unified]: https://unifiedjs.com
[highlight.js]: https://highlightjs.org
    </script>
</body>
</html>
